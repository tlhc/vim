"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"tong
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"pathgen
filetype off
call pathogen#infect()
call pathogen#helptags()

filetype plugin indent on
syntax on

"easymotion
let g:EasyMotion_leader_key = '<Leader>'
let g:EasyMotion_do_shade = 1

set nocompatible

function! MySys()
	if has("win32")
		return "win32"
	elseif has("unix")
		return "unix"
	else
		return "mac"
	endif
endfunction
"Set shell to be zsh 
if MySys() == "unix" || MySys() == "mac"
	set shell=zsh
else
	"I have to run win32 python without cygwin
	"set shell=E:cygwininsh
endif

"Sets how many lines of history VIM har to remember
set history=400

"Set to auto read when a file is changed from the outside
if exists("&autoread")
	set autoread
endif

"Have the mouse enabled all the time:
if exists("&mouse")
	set mouse=a
endif

"Set mapleader
let mapleader = ","
let g:mapleader = ","

"Fast saving
"nmap <leader>x :xa!<cr>
"nmap <leader>w :w!<cr>

syntax on
"internationalization
"I only work in Win2k Chinese version
if has("multi_byte")
	"set bomb
	set fileencodings=ucs-bom,utf-8,cp936,big5,euc-jp,euc-kr,latin1,gb18030
	" CJK environment detection and corresponding setting
	if v:lang =~ "^zh_CN"
		" Use cp936 to support GBK, euc-cn == gb2312
		set encoding=utf-8
		set termencoding=utf-8
		set fileencoding=utf-8
	elseif v:lang =~ "^zh_TW"
		" cp950, big5 or euc-tw
		" Are they equal to each other?
		set encoding=big5
		set termencoding=big5
		set fileencoding=big5
	elseif v:lang =~ "^ko"
		" Copied from someone's dotfile, untested
		set encoding=euc-kr
		set termencoding=euc-kr
		set fileencoding=euc-kr
	elseif v:lang =~ "^ja_JP"
		" Copied from someone's dotfile, untested
		set encoding=euc-jp
		set termencoding=euc-jp
		set fileencoding=euc-jp
	endif
	" Detect UTF-8 locale, and replace CJK setting if needed
	if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
		set encoding=utf-8
		set termencoding=utf-8
		set fileencoding=utf-8
	endif
endif

"if you use vim in tty,
"'uxterm -cjk' or putty with option 'Treat CJK ambiguous characters as wide' on
if exists("&ambiwidth")
	set ambiwidth=double
endif

if has("gui_running")
	set guioptions-=m
	set guioptions-=T
	set guioptions-=l
	set guioptions-=L
	set guioptions-=r
	set guioptions-=R
    set guioptions-=e
    set guioptions-=b

    "set maximized
    "set lines=999 columns=999
	if MySys()=="win32"
		"start gvim maximized
		if has("autocmd")
			au GUIEnter * simalt ~x
		endif
	endif
	"let psc_style='cool'
	if v:version > 601
		"colorscheme ps_color
		"colorscheme default
		"colorscheme elflord
		colorscheme seoul256-light
        "colorscheme default
		"colorscheme autumnleaf
        "colorscheme desertEx
		"colorscheme molokai
		"set guifont=Monaco:h14
		"set guifont=DejaVuSansMono\ 12
        set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 12
	endif
else
	if v:version > 601
		"set background=dark
		"colorscheme default
		"colorscheme molokai
		"colorscheme autumnleaf
		colorscheme seoul256-light
		"colorscheme seoul256-light
		"colorscheme desert
		"set guifont=DejaVuSansMono\ 13
		"set guifont=Monaco:h14
        "set guifont=DejaVuSansMono-Powerline\ 12
        set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 12
	endif
endif


set ffs=unix,mac,dos
set so=7

"Turn on WiLd menu
set wildmenu

"set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%)


"The commandbar is 1 highset 
set cmdheight=1

"Show line number
set number

"Do not redraw, when running macros.. lazyredraw
set lz

"Change buffer - without saving
set hid

"Bbackspace and cursor keys wrap to
set whichwrap+=<,>,h,l

"Ignore case when searching
set ignorecase
set incsearch

"Set magic on
set magic

"No sound on errors.
"set noerrorbell
set novisualbell
set t_vb=

"show matching bracet
set showmatch

"set show cmd
set showcmd

"How many tenths of a second to blink
set mat=8

"Highlight search thing
set hlsearch

"status line
set laststatus=2
set t_Co=256

"Smart way to move btw. window
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


"Tab configuration
map <leader>tn :tabnew %<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

if v:version>=700
	set switchbuf=usetab
endif

"always display the tab line
if exists("&showtabline")
	set stal=2
endif

"General Autocommand
map <leader>cd :cd %:p:h<cr>

"Remap VIM 0
map 0 ^

"Files and backup
set nobackup
set nowb
set noswapfile

"Folding
if exists("&foldenable")
	set fen
endif

if exists("&foldlevel")
	set fdl=0
endif

"Text option
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set backspace=eol,start,indent
set smarttab
set lbr

"Auto indent
set autoindent

"Smart indet
set smartindent

"C-style indenting
if has("cindent")
	set cindent
endif

"Wrap line
set wrap


"Yank Ring
map <leader>y :YRShow<cr>

"procss the readonly file and unsave file popup confrim
set confirm

map <C-F12> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

set tags=+tag
"use currentdir up dir recuit sub dir tag
set tags+=./tags,./../tags,./*/tag

"tagbar setting
let g:tagbar_ctags_bin='/usr/bin/ctags'
let g:tagbar_autofocus = 1
let g:tagbar_width = 35
map <F4> :TagbarToggle<cr> 

"Buf new
if has("autocmd") && v:version>600
	au BufRead,BufNew *.vim map <buffer> <leader><space> :w!<cr>:source %<cr>
endif

"Super paste
ino <C-v> <esc>:set paste<cr>mui<C-R>+<esc>mv'uV'v=:set nopaste<cr>

"cscope 
if has("cscope")
	set cscopequickfix=s-,c-,d-,i-,t-,e-
	set csto=0
	set cst
	set csverb
endif

"selction
set selection=exclusive
set selectmode=mouse,key
"do not show me
set shortmess=atI

set listchars=tab:\|\ ,trail:.,extends:>,precedes:<,eol:$
"format
set formatoptions=tcrqn

set completeopt=longest,menu
set complete=.,i

autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

"pwerline
"let g:Powerline_symbols='fancy'
"let g:Powerline_symbols='normal'
"let g:Powerline_cache_enabled = 1
"let g:Powerline_dividers_override = ['>>', '>', '<<', '<']
"let g:Powerline_symbols_override = {
"    \   'BRANCH': [0x2b60]
"    \ , 'RO'    : [0x2b64]
"    \ , 'FT'    : [0x2b62, 0x2b63]
"    \ , 'LINE'  : [0x2b61]
"\}
"

let g:airline_theme="Powerlineish"
let g:airline_powerline_fonts = 1


nmap <F3> :NERDTreeToggle<cr>
nmap <M-n> :silent cn <cr>
nmap <M-S-n> :silent cp <cr>
nmap <F8> :EasyBuffer<cr>
nmap <s-T> :CommandT<cr>

nnoremap <F7> :UndotreeToggle<cr>

let g:splice_initial_mode = "compare"
let g:splice_initial_layout_grid = 2
let g:splice_initial_layout_compare = 1

" The switch of the Source Explorer 
nmap <F10> :SrcExplToggle<CR> 

" Set the height of Source Explorer window 
let g:SrcExpl_winHeight = 8 

" Set 100 ms for refreshing the Source Explorer 
let g:SrcExpl_refreshTime = 100 

" Set "Enter" key to jump into the exact definition context 
let g:SrcExpl_jumpKey = "<ENTER>" 

" Set "Space" key for back from the definition context 
let g:SrcExpl_gobackKey = "<SPACE>" 

" In order to Avoid conflicts, the Source Explorer should know what plugins 
" are using buffers. And you need add their bufname into the list below 
" according to the command ":buffers!" 
let g:SrcExpl_pluginList = [ 
        \ "__Tag_List__", 
        \ "_NERD_tree_", 
        \ "Source_Explorer" 
    \ ] 

" Enable/Disable the local definition searching, and note that this is not 
" guaranteed to work, the Source Explorer doesn't check the syntax for now. 
" It only searches for a match with the keyword according to command 'gd' 
let g:SrcExpl_searchLocalDef = 1 

" Do not let the Source Explorer update the tags file when opening 
let g:SrcExpl_isUpdateTags = 0 

" Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to 
" create/update the tags file 
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ." 

" Set "<F12>" key for updating the tags file artificially 
let g:SrcExpl_updateTagsKey = "<C-F11>" 

" Set "<F3>" key for displaying the previous definition in the jump list 
let g:SrcExpl_prevDefKey = "<C-3>" 

" Set "<F4>" key for displaying the next definition in the jump list 
let g:SrcExpl_nextDefKey = "<C-4>" 

"fuzzfinder

let g:fuf_buffertag_ctagsPath = '/usr/bin/ctags'
nmap <c-s-f> :FufBufferTagAll<CR>
"nmap <leader>fdd :FufDirWithCurrentBufferDir<CR>
"nmap <leader>fd :FufDir<CR>
"nmap <leader>fb :FufBuffer<CR>

"qt help plugin
if MySys() == "unix"
    let g:qthelp_tags='/usr/local/Trolltech/Qt-4.8.4/doc/tags'
    "let g:qthelp_tags+='/usr/local/qwt-6.1.0-rc3/doc/tags'
    let g:qthelp_browser='/opt/google/chrome/google-chrome'
endif

"nmap <c-s-g> :QHelpOnThis<CR>

"vim easy align
vnoremap <silent> <Enter> :EasyAlign<cr>
"let g:easy_align_ignore_comment = 0
let g:easy_align_delimiters = {
\ '>': { 'pattern': '>>\|=>\|>' },
\ '/': { 'pattern': '//\+\|/\*\|\*/' },
\ '#': { 'pattern': '#\+' },
\ ']': {
\     'pattern':       '[\[\]]',
\     'margin_left':   '',
\     'margin_right':  '',
\     'stick_to_left': 0
\   },
\ ')': {
\     'pattern':       '[()]',
\     'margin_left':   '',
\     'margin_right':  '',
\     'stick_to_left': 0
\   }
\ }

"shell cmd for generate cscope files
map <leader>gc :CscopeGen<CR>

"syntastic
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'

let g:syntastic_cpp_compiler='clang++'
let g:syntastic_cpp_compiler_options=' -std=c++11 -stdlib=libc++'

"ToggleQuickfix window
function ToggleQuickfix() 
    " remember where we are 
    let winnr = winnr() 
    " find qf window, if any 
    let qfw = 0 
    windo if &l:buftype == "quickfix" | 
                \	let qfw = winnr() | endif 
    if qfw 
        " close qf window 
        cclose 
    else 
        " open qf window as last window, fullwidth 
         bot copen 
    endif 
    " go back to where we started from 
    if (winnr >= qfw) && (winnr > 1) 
        let winnr = winnr - 1 
    endif 
    exe winnr "wincmd w" 
endfunction 

command -nargs=0 -bar FF call ToggleQuickfix() 

function ShowError()
    execute ":Errors"
endfunction
command -nargs=0 -bar EE call ShowError() 

if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif
hi colorcolumn guibg=darkred
hi colorcolumn ctermbg=darkred


let g:fullscreen = 0
function! ToggleFullscreen()
    if g:fullscreen == 1
        let g:fullscreen = 0
        let mod = "remove"
    else
        let g:fullscreen = 1
        let mod = "add"
    endif
    call system("wmctrl -ir " . v:windowid . " -b " . mod . ",fullscreen")
endfunction
map <silent> <F11> :call ToggleFullscreen()<CR>

let g:xptemplate_vars="$author=tlhc&$email=marst629@gmail.com"

"cscope.vim config for mac
let g:cscope_cmd = '/usr/bin/cscope'

"
"for mac dash 
"
let g:dash_map = {
            \ 'python'     : 'p2',
            \ 'cpp'        : 'cc',
            \ }

"let g:C_CplusCFlags = '-Wall -g -std=c++11 -O0 -c '      " C++ compiler flags: compile, don't optimize
"let g:C_CplusLFlags = '-Wall -g -std=c++11 -O0'         " C++ compiler flags: link   , don't optimize

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR> 
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>  
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>  
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>  
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>  
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>  
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>  

"let g:CommandTMaxFiles=20000
silent! cs add ./cscope.out

"vim trans plugin tl(may have bugs)
nmap <silent> <c-s-K> <Esc>: GetWD<CR>
vmap <silent> <c-s-K> <Esc>: GetVWD<CR>

"you complete me
let g:ycm_global_ycm_extra_conf='./.ycm_extra_conf.py'
let g:ycm_extra_conf_globlist = ['./.ycm_extra_conf.py']
let g:ycm_confirm_extra_conf = 1
"let g:ycm_key_invoke_completion = '<TAB>'
"let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']
let g:ycm_autoclose_preview_window_after_insertion = 1

"let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']
"
"let g:SuperTabDefaultCompletionType = '<c-Tab>'
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:ycm_error_symbol='✗'
let g:ycm_warning_symbol='⚠'

let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'"
let g:ycm_collect_identifiers_from_tags_files = 1
"let g:ycm_server_use_vim_stdout = 1
"let g:ycm_server_log_level = 'debug'

"UltiSnips
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"silent! cs add /usr/include/eXosip2/cscope.out
"Gist vim
let g:gist_show_privates = 1
command B !make
command C !make clean

"for vim-togglist
nmap <script> <silent> <leader>l :call ToggleLocationList()<CR>
nmap <script> <silent> <leader>q :call ToggleQuickfixList()<CR>

let g:C_CFlags = '-Wall -std=c99 -g -O0 -c'

nmap <leader>mm :%s/\r//g<CR>

"for ObjectiveC
"https://github.com/majutsushi/tagbar/wiki
let g:tagbar_type_objc = {
    \ 'ctagstype' : 'ObjectiveC',
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }


"for ObjectiveC fuzzfinder ctags
"https://gist.github.com/yamaya/11165621"
let g:fuf_buffertag_ctagsPath = '/usr/bin/ctags'
let g:fuf_buffertag__objc = '--options='.expand('~/.vim/bundle/fuf-settings/ctags-options-fuzzyfinder')
